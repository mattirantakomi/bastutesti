- name: Wait for DONE
  wait_for:
    path: /root/DONE
    timeout: 600
    
- name: Install required packages
  apt:
    name:
      - python3-pip
      - cloud-image-utils
    state: latest
    update_cache: yes

- name: Install required python packages
  pip:
    name:
      - requests
      - proxmoxer

- name: check if k0s has already been installed
  stat: 
    path: /root/.k0s.installed
  register: installed

- name: Download k0s
  get_url:
    url: https://get.k0s.sh
    dest: /root/k0s
    mode: 0755
  when: installed.stat.exists == False

- name: Register myip
  shell: 
    cmd: |
      curl -s ip.jes.fi
  register: myip
  ignore_errors: True

- name: Register myinternalip
  shell: 
    cmd: |
      DEVICE=$(ifconfig -a | egrep "^eth|^enp" | sed -e 's/://g' | awk '{ print $1 }'); ifconfig $DEVICE | grep "inet " | awk '{ print $2 }'
  register: myinternalip
  ignore_errors: True

- name: Register tailscaleip
  shell: 
    cmd: |
      tailscale ip -4
  register: tailscaleip
  ignore_errors: True

- name: Install k0s
  shell: 
    cmd: |
      K0S_VERSION="{{ k0s_version }}" /root/k0s
      mkdir -p /etc/k0s
      k0s default-config > /etc/k0s/k0s.yaml
      sed -i -e 's/provider: kuberouter/provider: calico/g' /etc/k0s/k0s.yaml 
      sed -i -e 's/calico: null/calico: \n      mode: vxlan\n      overlay: CrossSubnet\n      wireguard: true/g' /etc/k0s/k0s.yaml
      sed -i -e 's/wireguard: true/wireguard: true\n      ipAutodetectionMethod: "interface=dummy\.\*,eth\.\*,enp\.\*,ens\.\*"/g' /etc/k0s/k0s.yaml
      # sed -i -e "s/address: {{ myinternalip.stdout }}/address: {{ tailscaleip.stdout }}/g" /etc/k0s/k0s.yaml
      # sed -i -e "s/peerAddress: {{ myinternalip.stdout }}/peerAddress: {{ tailscaleip.stdout }}/g" /etc/k0s/k0s.yaml
      sed -i -e "s/sans:/externalAddress: {{ tailscaleip.stdout }}\n    sans:\n    - {{ tailscaleip.stdout }}/g" /etc/k0s/k0s.yaml
      cp /etc/k0s/k0s.yaml /root/k0s.yaml
      k0s install controller -c /etc/k0s/k0s.yaml --enable-k0s-cloud-provider=true --enable-worker --enable-cloud-provider
      echo "#!/usr/bin/env bash" >> /root/annotate.sh
      echo "source /etc/environment" >> /root/annotate.sh
      echo "source /etc/profile" >> /root/annotate.sh
      echo "source /etc/bash.bashrc" >> /root/annotate.sh
      echo "while true; do k0s kubeconfig admin && break; sleep 4; done" >> /root/annotate.sh
      echo "while true; do k0s kubectl get node -o wide | grep $(hostname) | grep -q Ready && break; sleep 5; done" >> /root/annotate.sh
      echo "k0s kubectl annotate node $(hostname) k0sproject.io/node-ip-external={{ tailscaleip.stdout }}" >> /root/annotate.sh
      echo "@reboot bash -c '/root/annotate.sh && crontab -r -u root'" | crontab -u root -
      chmod +x /root/annotate.sh
  when: installed.stat.exists == False

- name: Reboot
  reboot:
    reboot_timeout: 600
  when: installed.stat.exists == False

- name: Save kubeconfig to variable
  shell: 
    cmd: |
      while true; do k0s kubeconfig admin && break; sleep 5; done
      k0s kubeconfig admin 2>/dev/null | sed -e "s/server.*/server: https:\/\/{{ tailscaleip.stdout }}:6443/g"
  register: kubeconfig
  ignore_errors: True
  when: installed.stat.exists == False

- name: Copy Kubeconfig to localhost
  copy:
    content: "{{ kubeconfig.stdout }}"
    dest: files/kubeconfig
  delegate_to: localhost
  when: installed.stat.exists == False

- name: Save worker token to variable
  shell: 
    cmd: |
      k0s token create --role=worker --wait | base64 -d | gunzip - | sed -e "s/server.*/server: https:\/\/{{ tailscaleip.stdout }}:6443/g" | gzip - | base64 -w0
  register: workertoken
  ignore_errors: True
  when: installed.stat.exists == False

- name: Copy worker token to localhost
  copy:
    content: "{{ workertoken.stdout }}"
    dest: files/workertoken
  delegate_to: localhost
  when: installed.stat.exists == False

- name: Create installed state file
  shell: 
    cmd: |
      true
    creates: "/root/.k0s.installed"
